<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MovieSearchMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="MovieSearchMap"
		type="study.spring.clip.model.MovieSearch">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="thumbnail" column="thumbnail" />
		<result property="name" column="name" />
		<result property="age" column="age" />
		<result property="type" column="type" />
		<result property="price" column="price" />
		<result property="director" column="director" />
		<result property="actor_no" column="actor_no" />
		<result property="movie_actor" column="movie_actor" />
		<result property="movie_no" column="movie_no" />
		<result property="runtime" column="runtime" />
	</resultMap>

	<!-- 검색을 위한 기능 정의 -->
	<select id="oneMovieSearch"
		parameterType="study.spring.clip.model.MovieSearch"
		resultMap="MovieSearchMap">
		SELECT movie_no, runtime, thumbnail, name, IF(age='12', '12세 이용가',
		IF(age='15', '15세 이용가', IF(age='19', '청소년 관람 불가', '전체 이용가'))) as age,
		IF(type='B',"구매","대여") AS type, Floor(price / 100 * (100 - sale)) AS
		price, director FROM movie
		WHERE movie_no IN (SELECT movie_no FROM movie_actor WHERE actor_no =
		(SELECT actor_no FROM actor WHERE name = '#{name}'))
		OR name = '#{name}'
		OR director LIKE '%#{name}%';
	</select>

</mapper>